#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#   Este nodo se suscribe a una imagen de ROS, la convierte en una matriz de
#   OpenCV y la muestra en pantalla
#

import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from std_msgs.msg import Int32


class Cam(object):
    def __init__(self, topic_name="camera_frame"):
        self.bridge = CvBridge()
        self.image = np.zeros((10,10))
        isub = rospy.Subscriber(topic_name, Image, self.image_callback)

    def image_callback(self, img):
        self.image = self.bridge.imgmsg_to_cv2(img, "bgr8")

    def get_image(self):
        return self.image


# Inicializar el nodo de ROS
rospy.init_node('camera_node')

# Objeto que se suscribe al tópico de la cámara
topic_name = "/camera/rgb/image_raw"
cam = Cam(topic_name)

# Tópico para publicar una imagen de salida
topic_pub = 'image_out'
pubimg = rospy.Publisher(topic_pub, Image, queue_size=10)

# Tópico para publicar si se encontro una persona
topic_persona = 'persona'
pubpersona = rospy.Publisher(topic_persona, Int32, queue_size=10)

# Msg Persona
persona_msg = Int32()

# Frecuencia del bucle principal
freq = 10
rate = rospy.Rate(freq)
# Bucle principal
while not rospy.is_shutdown():
    # Obtener la imagen del tópico de ROS en formato de OpenCV
    I = cam.get_image()
    # Realizar algún tipo de procesamiento sobre la imagen
    if count > 0:
    # convert to grayscale
        gray = cv2.cvtColor(I, cv2.COLOR_BGR2GRAY)  

        face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
        faces = face_cascade.detectMultiScale(gray, 1.3, 0)
        
        if len(faces) > 0:
            
            # Filtra las caras encontradas para quedarse con la de mayor area
            for i in range(len(faces)-1): 
                wa = 0
                ha = 0
                arr_may = [0,0,0,0]
                
                if (faces[i,2:3] < faces[i+1,2:3]):
                    arr_may = faces[i+1,:]

            faces2 = arr_may
            x, y, w, h = faces2
            # publish persona encontrada
                pubimg = faces2
                pubpersona.publish()
            for (x, y, w, h) in faces: 
                cv2.rectangle(I, (x,y), (x+w, y+h), (255,0,0), 5)
            

    # Mostrar la imagen
    cv2.imshow("Imagen Camara Turtlebot3", I)

    # Esperar al bucle para actualizar
    cv2.waitKey(1)
    # Opcional: publicar la imagen de salida como tópico de ROS
    #pubimg.publish(cam.bridge.cv2_to_imgmsg(I))
    rate.sleep()

cv2.destroyAllWindows()