#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import rospy
import numpy as np
from sensor_msgs.msg import LaserScan
from autlab3.msg import ArrayXY
# from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
import tf


ANGLE_MAX = 6.28318977356
ANGLE_INCREMENT = 0.0175019223243


def rotFromQuat(q):
    """ q = [ex, ey, ez, ew]
    """
    return np.array([[2.*(q[3]**2+q[0]**2)-1., 2.*(q[0]*q[1]-q[3]*q[2]), 2.*(q[0]*q[2]+q[3]*q[1])],
                     [2.*(q[0]*q[1]+q[3]*q[2]), 2.*(q[3]**2+q[1]**2)-1., 2.*(q[1]*q[2]-q[3]*q[0])],
                     [2.*(q[0]*q[2]-q[3]*q[1]), 2.*(q[1]*q[2]+q[3]*q[0]), 2.*(q[3]**2+q[2]**2)-1.]])


def Tlidar_wrt_base():
    """
    Sistema del lidar con respecto a base_link (la base del robot)
    """
    tflistener = tf.TransformListener()
    T = np.eye(4)
    rospy.sleep(0.5)
    try:
        (trans, rot) = tflistener.lookupTransform('base_link', 'base_scan', rospy.Time(0))
        T[0:3,0:3] = rotFromQuat(rot)
        T[0:3,3] = trans
    except:
        pass
    # Retorna la transformación homogénea del sistema del LiDAR con respecto al
    # sistema de base del robot.
    return T


class Lidar(object):
    def __init__(self):
        # Crear el suscriptor al tópico del LiDAR

        topic = 'scan/'
        self.pub = rospy.Subscriber(topic, LaserScan, self.callback_point)
        # Esperar 1 segundo
        rospy.sleep(1)
    
        # Precalcular un vector de numpy que contenga los ángulos para cada
        # rango. Se puede usar numpy.arange, por ejemplo
        self.theta = np.arange(0, ANGLE_MAX+ANGLE_INCREMENT, ANGLE_INCREMENT)

        # Almacenar los rangos máximo y mínimo que puede leer el LiDAR
        
        self.scan = LaserScan()
        self.max_range = self.scan.range_max
        self.min_range = self.scan.range_min
        
    def callback_point(self, msg):
        # Callback para el suscriptor
        self.scan = msg
        # print('RANGOS DEL CALLBACK: ', self.scan)
        
    def get_xy(self):
        """ Retorna los valores x,y de la medición, en el sistema del LiDAR
        """
        # Obtener los rangos medidos
        scan = self.scan
        ranges = scan.ranges

        # Filtrar los rangos que no son válidos: mantener solo los rangos
        # válidos y sus correspondientes ángulos
        # obtener valor válidos dentro de los rangos

        theta_aux = []
        ranges_aux = []

        for i in range(len(ranges)):
            if ((ranges[i] < self.max_range) & (ranges[i] > self.min_range)): 
                theta_aux.append(self.theta[i])
                ranges_aux.append(ranges[i])

        # Convertir los rangos válidos en x, y
        def pol2cart(rho, phi):
            x = rho * np.cos(phi)
            y = rho * np.sin(phi)
            return(x, y)

        x, y = pol2cart(ranges_aux, theta_aux)

        return x,y

# Inicializar el nodo
rospy.init_node('nodo_robot_obstaculo')

# Transformación del sistema del LiDAR al sistema del Robot
T_BL = Tlidar_wrt_base()

# Declarar del publicador
topic = 'cmd_vel'
pub_twist = rospy.Publisher(topic, Twist, queue_size=10)

lidar = Lidar()

# Movimiento del robot
twist = Twist()

# Tiempo de ejecución del bucle (en Hz)
rate = rospy.Rate(1)

while not rospy.is_shutdown():
    # Coordenadas en el sistema del LiDAR
    x, y = lidar.get_xy()
    # Conversión a coordenadas homogéneas
    P = np.ones((4, len(x)))
    P[0,:] = x
    P[1,:] = y
    P[2,:] = np.zeros((1,len(x)))   # El LiDAR mide z=0 en su propio sistema
                
    # Conversión de las coordenadas del sistema del LiDAR al sistema del Robot
    P_robot = T_BL.dot(P)
    xr = P_robot[0,:]     # x en sistema del robot
    yr = P_robot[1,:]     # y en el sistema del robot

    norms = np.linalg.norm(P_robot[0:2, :], axis=0)
    invalid_points = norms[norms < 0.5]

    if len(invalid_points) > 0:
        twist.linear.x = 0
    else:
        twist.linear.x = 0.26

    # for i in range(0, len(xr)):
    #     distance = (xr[i]**2 + yr[i]**2)**0.5
    #     if distance > 0.5:
    #         twist.linear.x   = 0.25
    #         twist.angular.z  = 0.0
    #     else:
    #         twist.linear.x   = 0.0
    #         twist.angular.z  = 0.0

    pub_twist.publish(twist)

    # Esperar
    rate.sleep()


